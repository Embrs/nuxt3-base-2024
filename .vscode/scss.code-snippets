{
  // Place your eagle-web Â∑•‰ΩúÂçÄ snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //   "scope": "javascript,typescript",
  //   "prefix": "log",
  //   "body": [
  //     "console.log('$1');",
  //     "$2"
  //   ],
  //   "description": "Log output to console"
  // }

  "rwd": {
		"prefix": "rwd",
		"body": [
      "@include rwd-pc-big {",
			"  $1",
			"}",
			"@include rwd-pc {",
			"  $2",
			"}",
      "@include rwd-mobile {",
      "  $3",
      "}",
		],
		"description": "RWD"
	},
  "component ÂÖÉ‰ª∂ÂãïÊÖãÊ≥®ÂÖ•": {
    "prefix": "com",
    "body": [
      "const $2 = defineAsyncComponent(() => import('$1'));"
    ]
  },
  "rwds": {
    "prefix": "rwds",
		"body": [
	    ".pc-show {",
      "  @include rwd-mobile {",
      "    display: none;",
      "  }",
      "}",
      ".mobile-show {",
      "  @include rwd-pc {",
      "    display: none;",
      "  }",
      "}",
		],
		"description": "RWD Show"
  },
  "dd": {
    "prefix": "dd",
    "body": [
       "// eslint-disable-line"
    ]
  },
  "ll": {
    "prefix": "ll",
    "body": [
      "console.log($1);",
    ]
  },
 
  "vue Ê™îÊ®°Êùø": {
    "prefix": "tt",
    "body": [
      "<script setup lang=\"ts\">",
      "// $1 Ë´ãÂ°´ÂØ´ÂäüËÉΩÊèèËø∞üëà",
      "</script>",
      "",
      "<template lang=\"pug\">",
      ".$1",
      "  LyTodo",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "// ‰ΩàÂ±Ä ----",
      ".$1 {",
      "  // TODO",
      "}",
      "",
      "// ÁµÑ‰ª∂ ----",
      "</style>",
      ""
    ]
  },
  "scss Ê™îÊ®°Êùø": {
    "prefix": "scss",
    "body": [
      "<style lang=\"scss\" scoped>",
      "// ‰ΩàÂ±Ä ----",
      ".$1 {",
      "  // TODO",
      "}",
      "",
      "// ÁµÑ‰ª∂ ----",
      "</style>",
      ""
    ]
  },
  "mark line": {
    "prefix": "// -",
    "body": [
      "// $1-----------------------------------------------------------------------------------------------",
    ]
  },
  "methods ÂàÜÈ°û": {
		"prefix": "mClassify",
		"body": [
      "// Ë≥áÊñô --------------------------------------------------------------------------------------------",
      "// interface Props {}",
			"// const props = withDefaults(defineProps<Props>(),{});",
			"// watch(()=>,()=>{},{deep: true, immediate: true})",
      "",
			"// Êé•Êî∂‰∫ã‰ª∂ -----------------------------------------------------------------------------------------",
			"",
			"// ÊµÅÁ®ã --------------------------------------------------------------------------------------------",
			"",
			"// ÂáΩÂºè --------------------------------------------------------------------------------------------",
			"",
      "// Api ---------------------------------------------------------------------------------------------",
			"",
      "// ÁîüÂëΩÈÄ±Êúü -----------------------------------------------------------------------------------------",
			"// onMounted(()=>{});",
			"",
      "// Â∞çÂ§ñ‰∫ã‰ª∂ -----------------------------------------------------------------------------------------", 
      "// interface Emit {'on-change': [id,number, value: any]}",
			"// const emit = defineEmits<Emit>();",
			"",
			"// Ref Ëº∏Âá∫ ----------------------------------------------------------------------------------------",
			"// defineExpose({ ... });",
		]
	},
  "apibase": {
    "prefix": "api",
    "body": [
      "/**  Ë™™Êòé API */",
      "const Api$1 = async (): Promise<boolean> => {",
      "  const res = await api.$1();",
      "  if (res?.status?.is_success) {",
      "    return true;",
      "  }",
      "  if (res?.status?.message) ElMessage({ message: res?.status?.message, type: 'error' });",
      "  return false;",
      "};",
    ]
  },
  "useAsnycData": {
    "prefix": "useAsyncData",
		"body": [
			"useAsyncData('$1-init', async () => {",
      "  $2",
      "  await Promise.all([fn1(), fn2()]);",
      "  return true;",
      "});"
		]
  },
  "debounce Âü∫Á§é": {
		"prefix": "debounce",
		"body": [
			"lodash.debounce(() => {",
			"  // ",
			"}, 400, { leading: true, trailing: false });"
		]
	},
  "ts ÂñÆË°åÈóúÈñâÊ™¢Ê∏¨": {
    "prefix": "ts-ignore",
    "body": [
      "// @ts-ignore"
    ]
  },
  "flow ÊµÅÁ®ãÂü∫Â∫ï": {
    "prefix": "flow",
    "body": [
      "const $1Flow = () => {",
      "  try {",
      "    // if () {",
      "    //   throw new Error('Error');",
      "    // }",
      "    // return true;",
      "  } catch (error) {",
      "    // console.error('error', error);",
      "    // return false;",
      "  } finally {",
      "    // TODO",
      "  }",
      "};"
    ]
  },
  "ElInput": {
    "prefix": "input",
    "body": [
      "ElFormItem(:label=\"$$t('form.$1')\" prop=\"//TODO\")",
      "  ElInput(",
      "    :placeholder=\"$$t('form.enter')\"",
      "    maxlength=\"200\"",
      "    @change=\"EmitChange\"",
      "  )"
    ]
  },
  "ElTextarea": {
    "prefix": "memo",
    "body": [
      "ElFormItem(:label=\"$$t('form.memo')\")",
      "  ElInput(",
      "    :placeholder=\"$$t('form.enter')\"",
      "    type=\"textarea\"",
      "    maxlength=\"2000\"",
      "    :autosize=\"{minRows: 4, maxRows: 4 }\"",
      "    @change=\"EmitChange\"",
      "  )",
    ]
  },
  "ElSelect": {
    "prefix": "select",
    "body": [
      "ElFormItem(:label=\"$$t('form.$1')\" prop=\"//TODO\")",
      "  ElSelect(",
      "    :placeholder=\"$$t('form.select')\"",
      "    clearable",
      "    @change=\"EmitChange\"",
      "  )",
      "    ElOption(",
      "      v-for=\"item of [{value: 1, label: 'Demo'}]\"",
      "      :key=\"item.value\"",
      "      :label=\"item.label\"",
      "      :value=\"item.value\"",
      "    )",
    ]
  },
  "ElDatePicker": {
    "prefix": "datepicker",
    "body": [
      "ElFormItem(:label=\"$$t('form.$1')\" prop=\"//TODO\")",
      "  ElDatePicker(",
      "    type=\"date\"",
      "    format=\"YYYY-MM-DD\"",
      "    value-format=\"YYYY-MM-DD\"",
      "    :placeholder=\"$$t('form.select')\"",
      "    style=\"width: 100%\"",
      "    value-on-clear=\"\"",
      "    :editable=\"false\"",
      "    @change=\"EmitChange\"",
      "  )",
    ]
  },
  "ElRadio": {
    "prefix": "radio",
    "body": [
      "ElFormItem(:label=\"$$t('form.$1')\")",
      "  ElRadioGroup",
      "    ElRadio(value=\"1\") {{ $$t('form.no') }}",
      "    ElRadio(value=\"2\") {{ $$t('form.yes') }}",
    ]
  },
  "ElCheckbox": {
    "prefix": "checkbox",
    "body": [
      "ElFormItem(:label=\"$$t('form.$t')\")",
      "  ElCheckboxGroup(v-model=\"params.roleTypeList\")",
      "    ElCheckbox(v-for=\" roleItem of roleTypeList\" :key=\"roleItem.value\" :label=\"roleItem.label\" :value=\"roleItem.value\")",
    ]
  },
}
